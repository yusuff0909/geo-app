# .github/workflows/config_sonar_ci-cd.yml

name: Geolocation App CI/CD

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

# Repository key for jfrog: GEOLOCATION-GITHUB_ACTION
# GLOBAL ENV: Only GitHub secrets or constants
env:
  ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ECR_ROLE: ${{ secrets.ECR_ACESS_ROLE }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO_NAME: geo-app

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean verify

      - name: Package with Maven
        run: mvn -B clean package

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: geo-app-jar
          path: target/*.jar

  sonar:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=geo-app -Dsonar.qualitygate.wait=true # Replace 'geo-app' with your actual project key

      # - name: Verify Quality Gate Status
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   with:
      #       scanMetadataReportFile: .scannerwork/report-task.txt
      #       sonarToken: ${{ secrets.SONAR_TOKEN }}
      #       timeoutMinutes: 5
      #       sleepTime: 10  # Seconds between status checks

  docker:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: geo-app-jar
          path: target/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t geo-app:${{ github.sha }} .

      # Trivy Scan for Vulnerabilities
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: geo-app:${{ github.sha }}
          format: table  # can also use 'json' or 'sarif'
          #exit-code: 1   # fail job if vulnerabilities are found
          severity: CRITICAL,HIGH  # only report high/critical issues

      - name: Tag image for ECR
        run: |
          APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
          docker tag geo-app:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/geo-app:${{ github.sha }}
          docker tag geo-app:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/geo-app:$APP_VERSION

      - name: Push Docker image to ECR
        run: |
          APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
          docker push ${{ steps.login-ecr.outputs.registry }}/geo-app:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/geo-app:$APP_VERSION

  deploy:
    name: Deploy to JFrog
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: geo-app-jar
          path: target/

      - name: Deploy to GitHub Packages
        run: |
          echo $GIT_HUB_TOKEN
          echo $GITHUB_USERNAME
          pwd
          ls
          APP_VERSION=`grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)'`
          echo $APP_VERSION

          APP_NAME=`grep -m2 '<artifactId>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)'`
          echo $APP_NAME

          APP_LONG_NAME=$APP_NAME-$APP_VERSION.jar
          echo $APP_LONG_NAME
          echo $MAVEN_USERNAME
          ls target
         
          echo curl -v --user $MAVEN_USERNAME:$MAVEN_PASSWORD -T target/$APP_LONG_NAME -X PUT "$ARTIFACTORY_URL/artifactory/GEOLOCATION-GITHUB_ACTION/$APP_LONG_NAME"
          curl -v --user $MAVEN_USERNAME:$MAVEN_PASSWORD -T target/$APP_LONG_NAME -X PUT "$ARTIFACTORY_URL/artifactory/GEOLOCATION-GITHUB_ACTION/$APP_LONG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}
          MAVEN_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}