name: Geolocation App CI/CD

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TASK_DEFINITION: nginx-task
  ECS_CLUSTER: nginx-cluster
  ECS_SERVICE: nginx-service
  CONTAINER_NAME: nginx
  ECR_REPO_NAME: geo-app
  IMAGE_TAG: ${{ github.sha }}  # Using git SHA for better traceability

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean verify

      - name: Package with Maven
        run: mvn -B clean package

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: geo-app-jar
          path: target/*.jar

  docker:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image-uri: ${{ steps.set-image.outputs.image-uri }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: geo-app-jar
          path: target/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Scan Docker Image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}"
          format: "json"
          exit-code: "0"
          output: "trivy-image-results.json"
          severity: "CRITICAL,HIGH"

      - name: Push image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Store image URI
        id: set-image
        run: |
          echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current task definition
        id: download-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION }} \
            --query 'taskDefinition' \
            --output json > task-definition.json
          
          # Clean up task definition
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > clean-task-definition.json

      - name: Update task definition with new image
        id: update-task-def
        run: |
          jq --arg IMAGE_URI "${{ needs.docker.outputs.image-uri }}" \
             --arg CONTAINER_NAME "${{ env.CONTAINER_NAME }}" \
             '(.containerDefinitions[] | select(.name == $CONTAINER_NAME) | .image) = $IMAGE_URI' \
             clean-task-definition.json > updated-task-definition.json

      - name: Register new task definition
        id: register-task-def
        run: |
          # Validate images
          if jq -e '.containerDefinitions[] | select(.image == null or .image == "")' updated-task-definition.json; then
            echo "Error: Some containers have empty images"
            exit 1
          fi
          
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-def-arn }} \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Get service status
        run: |
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0]' \
            --output table