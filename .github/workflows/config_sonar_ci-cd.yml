# .github/workflows/config_sonar_ci-cd.yml

name: Geolocation App CI/CD

# This workflow builds the project and runs SonarQube analysis on every push to the main branch.

# It uses Maven for building and SonarQube for code quality analysis.

# The workflow is triggered on pushes to the main branch.

# It caches Maven dependencies and SonarQube analysis results to speed up the build process.

# The SonarQube analysis requires a project key, which should be set in the secrets of the repository.

# The workflow consists of two jobs: 'build' and 'sonar'.

# The 'build' job compiles the project and runs tests, while the 'sonar' job performs the SonarQube analysis.

# The 'sonar' job depends on the 'build' job, ensuring that the analysis runs only after a successful build.

# The workflow uses JDK 17 and caches Maven packages to optimize build times.

# The SonarQube analysis is configured to use the SonarQube server URL and authentication token stored in GitHub secrets.

# The workflow is designed to run on an Ubuntu environment and uses the latest versions of the actions for checkout, Java setup, and caching.

on:

 push:

   branches:

     - main

 pull_request:

   branches:

     - main

 

permissions:

 id-token: write

 contents: read

 

# GLOBAL ENV: Only GitHub secrets or constants

env:

 ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}

 SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

 SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

 ECR_ROLE: ${{ secrets.ECR_ACESS_ROLE }}

 AWS_REGION: ${{ secrets.AWS_REGION }}

 

jobs:

 build:

   runs-on: ubuntu-latest

   steps:

     - uses: actions/checkout@v4

       with:

         fetch-depth: 0

 

     - name: Set up JDK 17

       uses: actions/setup-java@v3

       with:

         distribution: 'temurin'

         java-version: 17

         cache: 'maven'


     - name: Cache Maven packages

       uses: actions/cache@v4

       with:

         path: ~/.m2

         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

         restore-keys: ${{ runner.os }}-m2

# This step compiles the project and runs tests

     - name: Build with Maven

       run: mvn -B clean verify


     - name: Package with Maven

       run: mvn -B clean package

# This step uploads the JAR file as an artifact for later use in the Docker build job

     - name: Upload JAR file

       uses: actions/upload-artifact@v4

       with:

         name: geo-app-jar

         path: target/*.jar


 sonar:

   runs-on: ubuntu-latest

   needs: build

   steps:

     - uses: actions/checkout@v4

       with:

         fetch-depth: 0

# Set up JDK 17 for SonarQube analysis

     - name: Set up JDK 17

       uses: actions/setup-java@v3

       with:

         distribution: 'temurin'

         java-version: 17

         cache: 'maven'

# Cache SonarQube packages to speed up the analysis process

     - name: Cache SonarQube packages

       uses: actions/cache@v4

       with:

         path: ~/.sonar/cache

         key: ${{ runner.os }}-sonar

         restore-keys: ${{ runner.os }}-sonar

# Cache Maven packages to speed up the build process

     - name: Cache Maven packages

       uses: actions/cache@v4

       with:

         path: ~/.m2

         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

         restore-keys: ${{ runner.os }}-m2

# SonarQube Analysis

     - name: SonarQube Scan

       env:

         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

         SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

         SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

       run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=geo-app -Dsonar.qualitygate.wait=true # Replace 'geo-app' with your actual project key

    

     - name: Verify Quality Gate Status

       uses: sonarsource/sonarqube-quality-gate-action@master

       with:

           scanMetadataReportFile: target/sonar/report-task.txt

           pollingTimeoutSec: 300

       env:

         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

 docker:

   name: Docker Build & Push to ECR

   runs-on: ubuntu-latest

   needs: sonar  # ensures this runs after 'sonar'

   steps:

     - name: Checkout Code

       uses: actions/checkout@v4

       with:

         fetch-depth: 0

     # Use OIDC Role for this repo

     - name: Configure AWS Credentials

       uses: aws-actions/configure-aws-credentials@v4

       with:

         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

         aws-region: ${{ secrets.AWS_REGION }}

     # Download the JAR file artifact from the build job

     - name: Download JAR file artifact

       uses: actions/download-artifact@v4

       with:

         name: geo-app-jar

         path: target/

# Login to Amazon ECR

     - name: Login to Amazon ECR

       id: login-ecr

       uses: aws-actions/amazon-ecr-login@v2

# Build Docker image 

     - name: Build Docker image

       run: |

        docker build -t geo-app:${{ github.sha }} .

# Trivy Scan for Vulnerabilities

     - name: Scan Docker image with Trivy

       uses: aquasecurity/trivy-action@master

       with:

         image-ref: geo-app:${{ github.sha }}

         format: table  # can also use 'json' or 'sarif'

         #exit-code: 1   # fail job if vulnerabilities are found

         severity: CRITICAL,HIGH  # only report high/critical issues

# Tag image for ECR
     - name: Tag image for ECR

       run: |

        APP_VERSION=`grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)'`

        echo $APP_VERSION

        docker tag geo-app:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/geo-app:${{ github.sha }}

        docker tag geo-app:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/geo-app:$APP_VERSION

# Push Docker image to ECR    
     - name: Push Docker image to ECR

       run: |

        APP_VERSION=`grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)'`

        echo $APP_VERSION

        docker push ${{ steps.login-ecr.outputs.registry }}/geo-app:${{ github.sha }}

        docker push ${{ steps.login-ecr.outputs.registry }}/geo-app:$APP_VERSION