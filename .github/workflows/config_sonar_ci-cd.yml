# .github/workflows/config_sonar_ci-cd.yml

name: Geolocation App CI/CD

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

# GLOBAL ENV: Only GitHub secrets or constants
env:
  ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ECR_ROLE: ${{ secrets.ECR_ACESS_ROLE }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TASK_DEFINITION: nginx-task
  ECS_CLUSTER: nginx-cluster
  ECS_SERVICE: nginx-service
  CONTAINER_NAME: nginx
  ECR_REPO_NAME: geo-app

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean verify

      - name: Package with Maven
        run: mvn -B clean package

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: geo-app-jar
          path: target/*.jar

  # sonar:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: 17
  #         cache: 'maven'

  #     - name: Cache SonarQube packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.sonar/cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar

  #     - name: Cache Maven packages
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.m2
  #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #         restore-keys: ${{ runner.os }}-m2

      # - name: SonarQube Scan
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
      #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=geo-app -Dsonar.qualitygate.wait=true # Replace 'geo-app' with your actual project key

      # - name: Verify Quality Gate Status
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   with:
      #       scanMetadataReportFile: .scannerwork/report-task.txt
      #       sonarToken: ${{ secrets.SONAR_TOKEN }}
      #       timeoutMinutes: 5
      #       sleepTime: 10  # Seconds between status checks

  docker:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image-uri: ${{ steps.build-image.outputs.image-uri }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: geo-app-jar
          path: target/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t geo-app:${{ github.sha }} .

      # Trivy Scan for Vulnerabilities
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: geo-app:${{ github.sha }}
          format: table  # can also use 'json' or 'sarif'
          #exit-code: 1   # fail job if vulnerabilities are found
          severity: CRITICAL,HIGH  # only report high/critical issues

      - name: Tag and Push Docker image
        id: build-image
        run: |
          APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ github.sha }}
          
          # Tag images
          docker tag geo-app:$IMAGE_TAG $ECR_REGISTRY/geo-app:$IMAGE_TAG
          docker tag geo-app:$IMAGE_TAG $ECR_REGISTRY/geo-app:$APP_VERSION
          docker tag geo-app:$IMAGE_TAG $ECR_REGISTRY/geo-app:latest
          
          # Push images
          docker push $ECR_REGISTRY/geo-app:$IMAGE_TAG
          docker push $ECR_REGISTRY/geo-app:$APP_VERSION
          docker push $ECR_REGISTRY/geo-app:latest
          
          # Set output for deployment
          echo "image-uri=$ECR_REGISTRY/geo-app:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: sonar

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Download JAR file artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: geo-app-jar
  #         path: target/

  #     # Load secrets from Vault and set as env variables for rest of job
  #     - name: Read secrets from Vault
  #       uses: hashicorp/vault-action@v2
  #       with:
  #         url: http://52.32.151.162:8200
  #         method: token
  #         token: ${{ secrets.VAULT_TOKEN }}
  #         exportEnv: true
  #         secrets: |
  #           secrets/creds/jfrog username | MAVEN_USERNAME_A ;
  #           secrets/creds/jfrog password | MAVEN_PASSWORD_A

  #     - name: Deploy to JFrog
  #       env:
  #         MAVEN_USERNAME_A: ${{ env.MAVEN_USERNAME_A }}
  #         MAVEN_PASSWORD_A: ${{ env.MAVEN_PASSWORD_A }}
  #       run: |
  #         APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
  #         APP_NAME=$(grep -m2 '<artifactId>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
  #         APP_LONG_NAME=$APP_NAME-$APP_VERSION.jar

  #         echo "Deploying $APP_LONG_NAME to Artifactory..."
  #         curl -v --user $MAVEN_USERNAME_A:$MAVEN_PASSWORD_A \
  #           -T target/$APP_LONG_NAME \
  #           -X PUT "$ARTIFACTORY_URL/artifactory/GEOLOCATION-GITHUB_ACTION/$APP_LONG_NAME"

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download current task definition
        id: download-task-def
        run: |
          echo "Downloading current task definition for ${{ env.TASK_DEFINITION }}..."
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION }} \
            --query 'taskDefinition' \
            --output json > task-definition.json
          
          echo "Original task definition structure:"
          cat task-definition.json | jq '.containerDefinitions[] | {name: .name, image: .image}'
          
          # Remove fields that shouldn't be in the new task definition registration
          cat task-definition.json | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' > clean-task-definition.json
          
          echo "Task definition downloaded and cleaned"
          echo "Container definitions in cleaned task definition:"
          cat clean-task-definition.json | jq '.containerDefinitions[] | {name: .name, image: .image}'

      - name: Update task definition with new image
        id: update-task-def
        run: |
          IMAGE_URI="${{ needs.docker.outputs.image-uri }}"
          CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
          echo "Updating task definition with new image: $IMAGE_URI"
          echo "Container name: $CONTAINER_NAME"
          
          # Debug: Show current container definitions
          echo "Current container definitions:"
          cat clean-task-definition.json | jq '.containerDefinitions'
          
          # Update the image URI in the container definition
          cat clean-task-definition.json | jq --arg IMAGE_URI "$IMAGE_URI" --arg CONTAINER_NAME "$CONTAINER_NAME" \
            '(.containerDefinitions[] | select(.name == $CONTAINER_NAME) | .image) = $IMAGE_URI' \
            > updated-task-definition.json
          
          echo "Updated task definition:"
          cat updated-task-definition.json
          
          # Verify the image was updated
          echo "Verifying image update:"
          cat updated-task-definition.json | jq --arg CONTAINER_NAME "$CONTAINER_NAME" \
            '.containerDefinitions[] | select(.name == $CONTAINER_NAME) | .image'

      - name: Register new task definition
        id: register-task-def
        run: |
          # Validate that all containers have images set
          echo "Validating task definition before registration..."
          EMPTY_IMAGES=$(cat updated-task-definition.json | jq '.containerDefinitions[] | select(.image == null or .image == "") | .name' -r)
          
          if [ ! -z "$EMPTY_IMAGES" ]; then
            echo "Error: The following containers have empty or null images:"
            echo "$EMPTY_IMAGES"
            echo "Task definition validation failed!"
            exit 1
          fi
          
          echo "All containers have valid images. Proceeding with registration..."
          echo "Final task definition to register:"
          cat updated-task-definition.json | jq '.containerDefinitions[] | {name: .name, image: .image}'
          
          echo "Registering new task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "New task definition registered: $NEW_TASK_DEF_ARN"
          echo "task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          echo "Updating ECS service ${{ env.ECS_SERVICE }} in cluster ${{ env.ECS_CLUSTER }}..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-def-arn }} \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for service deployment to complete..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
          
          echo "Deployment completed successfully!"

      - name: Get service status
        run: |
          echo "Final service status:"
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].{ServiceName:serviceName,Status:status,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition}' \
            --output table